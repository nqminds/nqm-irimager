# SPDX-License-Identifier: BSD-2-Clause
# SPDX-FileCopyrightText: Copyright (c) 2017-2019, Joe Rickerby and contributors. All rights reserved.

name: Build and upload to PyPI

on:
  workflow_dispatch:
  pull_request:
  push:
  release:
    types:
      - published

env:
  libirimager_version: "4.1.1"
  libirmager_arches: 'amd64 arm64'

jobs:
  build_wheels_matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v3
      - name: Install pdm
        run: pipx install pdm
      - name: Install cibuildwheel
        run: |
          pdm install --group cibuildwheel --no-default --no-self --verbose
      - id: set-matrix
        run: |
            echo "include=$(
              pdm run cibuildwheel --print-build-identifiers --platform linux \
              | jq -Rc '{"only": inputs, "os": "ubuntu-latest"}' \
              | jq -sc
            )" >> "$GITHUB_OUTPUT"

  build_wheels:
    name: Build ${{ matrix.os }} ${{ matrix.only }}
    needs: build_wheels_matrix
    timeout-minutes: 30
    strategy:
      matrix:
        include: ${{ fromJson(needs.build_wheels_matrix.outputs.include) }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Cache libirimager ${{ env.libirimager_version }}
        id: libirimager-cache
        uses: actions/cache@v3
        with:
          path: "${{ runner.temp }}/libirimager"
          key: libirimager-${{ env.libirimager_version }}-${{ env.libirmager_arches }}

      - name: Download libirimager ${{ env.libirimager_version }}
        if: steps.libirimager-cache.outputs.cache-hit != 'true'
        working-directory: "${{ runner.temp }}"
        run: |
          mkdir -p libirimager
          cd libirimager
          for ARCH in ${libirmager_arches}; do
            wget "http://ftp.evocortex.com/libirimager-4.1.1-${ARCH}.deb"
          done

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Install pdm
        run: pipx install pdm
      - name: Install cibuildwheel
        run: |
          pdm install --group cibuildwheel --no-default --no-self --verbose
      - name: Build wheels
        run: |
          pdm run cibuildwheel --only '${{ matrix.only }}'
        env:
          # in cibuildwheel environment, the `/host` folder contains the
          # host file system
          CIBW_ENVIRONMENT_LINUX: >
            LIBIRIMAGER_DOWNLOAD_DIR="/host/${{ runner.temp }}/libirimager"
          CIBW_BEFORE_ALL_LINUX: |
            set -e # exit on error
            ARCH="$(uname -m)" # convert the Linux arch to Debian ABI arch
            case $ARCH in
              armv5*) DEB_ARCH="armv5";;
              armv6*) DEB_ARCH="armv6";;
              armv7*) DEB_ARCH="arm";;
              aarch64) DEB_ARCH="arm64";;
              x86) DEB_ARCH="386";;
              x86_64) DEB_ARCH="amd64";;
              i686) DEB_ARCH="386";;
              i386) DEB_ARCH="386";;
            esac
            dnf install epel-release wget systemd-devel libusb1-devel --assumeyes
            dnf install alien --assumeyes
            alien --to-rpm --target="$ARCH" "${LIBIRIMAGER_DOWNLOAD_DIR}/libirimager-4.1.1-${DEB_ARCH}.deb"
            # the auto-generated RPM made by alien is kinda buggy, so we need
            # to use --replacefiles to avoid rpm throwing an error
            rpm --install --replacefiles ./libirimager-4.1.1-*.rpm

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        # with:
        # To test: repository_url: https://test.pypi.org/legacy/
